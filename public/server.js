"use strict";function listRooms(){return games.map(function(o){return o.toJSON()})}function findByDungeonId(o){for(var e=0;e<games.length;e++)for(var n=0;e<games[e].dungeons.length;n++)if(games[e].dungeons[n].id===o)return games[e]}function Dungeon(o){this.socket=o,this.id=this.socket.id,this.area=[],this.life=20,this.money=100,this.init()}var games=[];Dungeon.prototype={init:function(){var o=this;this.socket.on("new-game",function(){games.push(new Game(o.socket));var e=find(games,o.socket.id);e.addDungeon(o),o.socket.emit("game-created",e.toJSON())}),this.socket.on("list-games",function(){o.socket.emit("room-list",listRooms())}),this.socket.on("disconnect",function(){var e=find(games,o.socket.id);e=e||findByDungeonId(o.socket.id),e&&(e.dungeons.length<=1&&remove(games,e),e.removeDungeon(o.socket.id),e.broadcast("update",e.toJSON())),console.log(e),console.log("Disconnected: "+o.socket.id)}),this.socket.on("join-game",function(e){var n=find(games,e);o.joinRoom(n)})},toJSON:function(){return{id:this.id,area:this.area,life:this.life,money:this.money}},joinRoom:function(o){this.socket.join(o.id),o.addDungeon(this),o.broadcast("update",o.toJSON()),console.log(this.socket.id+" has joined: "+o.id)}},module.exports=function(o){new Dungeon(o);console.log("Connected: "+o.id)};